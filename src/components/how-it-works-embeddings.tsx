"use client";

import { useState, type FormEvent } from "react";
import { Loader, Wand2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { getTextEmbedding, type GetTextEmbeddingOutput } from "@/ai/flows/get-text-embedding";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";

export function HowItWorksEmbeddings() {
  const [inputText, setInputText] = useState<string>("");
  const [embedding, setEmbedding] = useState<GetTextEmbeddingOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleSubmit = async (event: FormEvent) => {
    event.preventDefault();
    if (!inputText.trim()) {
      toast({
        title: "No Text",
        description: "Please enter some text first.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    setEmbedding(null);
    try {
      const result = await getTextEmbedding({ text: inputText });
      setEmbedding(result);
    } catch (error: any) {
      console.error(error);
      toast({
        title: "Embedding Failed",
        description: error.message || "Something went wrong. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const resetState = () => {
    setInputText("");
    setEmbedding(null);
    setIsLoading(false);
  };

  return (
    <Card className="w-full max-w-4xl mx-auto shadow-lg">
      <CardHeader>
        <CardTitle className="text-2xl font-headline">Generate Text Embeddings</CardTitle>
        <CardDescription>Enter any text to see its numerical representation (embedding vector) as generated by the AI.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid md:grid-cols-2 gap-8 items-start">
          <form onSubmit={handleSubmit} className="flex flex-col gap-4">
            <div className="grid w-full gap-1.5">
              <Label htmlFor="text-input">Your Text</Label>
              <Textarea
                id="text-input"
                placeholder="Type your text here. For example: 'The quick brown fox jumps over the lazy dog.'"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                className="min-h-[150px]"
                disabled={isLoading || !!embedding}
              />
            </div>
            <Button type="submit" disabled={!inputText.trim() || isLoading || !!embedding} size="lg" className="w-full bg-accent hover:bg-accent/90 text-accent-foreground">
              {isLoading ? (
                <>
                  <Loader className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Wand2 className="mr-2 h-4 w-4" />
                  Generate Embedding
                </>
              )}
            </Button>
          </form>

          <div className="flex flex-col justify-center min-h-[300px] bg-secondary/30 p-6 rounded-lg">
            {isLoading && (
              <div className="text-center">
                <Loader className="mx-auto h-12 w-12 text-primary animate-spin" />
                <p className="mt-4 text-lg font-semibold">Generating Embedding...</p>
                <p className="text-muted-foreground">The AI is converting your text to numbers.</p>
              </div>
            )}
            
            {!isLoading && !embedding && (
              <div className="text-center text-muted-foreground">
                <p className="text-lg font-semibold">Awaiting Text</p>
                <p>Your embedding vector will appear here.</p>
              </div>
            )}

            {embedding && (
              <div className="flex flex-col text-center gap-4">
                <p className="text-muted-foreground">Embedding Vector (first 100 values)</p>
                <div className="w-full h-48 bg-background/50 rounded-lg p-2 font-mono text-xs overflow-auto text-left break-all">
                  [{embedding.embedding.slice(0, 100).join(', ')}, ...]
                </div>
                <p className="text-sm text-muted-foreground">Total dimensions: {embedding.embedding.length}</p>
                <Button onClick={resetState} variant="outline" className="mt-4">
                  Try again
                </Button>
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
